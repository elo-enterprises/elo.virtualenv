##
#
##
- block:
  - debug: msg="elo.virtualenv::main"
  - name: Ensure virtualenv related packages are installed
    apt:
      name: "{{item}}"
      state: present
    become: yes
    become_user: root
    with_items:
      - python3-virtualenv

  - import_tasks: facts.yml

  - name: Ensure `virtualenv_home` exists
    shell: >-
      ls {{virtualenv_home}}
      || mkdir -p {{virtualenv_home}}
    with_items:
      - "{{virtualenv_home}}"

- block:
  - debug: msg="Create venv if it doesnt exist"
  - block:
      - shell: "ls {{virtualenv_home}}/{{venv.name}}"
      - set_fact:
          tmp_venv_created: no
    rescue:
      - shell: >-
          {{virtualenv_exec}} --python
          {{venv.get('python', 'python3')}}
          {{virtualenv_home}}/{{venv.name}}
        register: tmp_out
      - debug: var=tmp_out
      - set_fact:
          tmp_venv_created: yes
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('state', 'present') in ['present','installed']

- block:
    - name: Destroy venv if requested
      shell: >-
        (ls {{virtualenv_home}}/{{venv.name.replace(' ','_')}}
        && rm -rf {{virtualenv_home}}/{{venv.name}})
        || echo 'no such venv'
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('state') in ['removed', 'absent', 'destroyed']

- name: Honor `venv.requirements_file`
  shell: >-
    ls {{venv.requirements_file}}
    && bash -c "source {{virtualenv_home}}/{{venv.name}}/bin/activate
    && cd {{venv.requirements_file|dirname}}
    && pip install -r {{venv.requirements_file}}"
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('requirements_file')

- name: Honor `venv.requirements` (as list)
  shell: >-
    {{virtualenv_home}}/{{venv.name}}/bin/pip install {{item}}
  with_items: "{{venv.requirements}}"
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('requirements') is iterable

- name: Honor `venv.requirements` (as string)
  shell: >-
    {{virtualenv_home}}/{{venv.name}}/bin/pip install {{venv.requirements}}
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('requirements', []) is not iterable

- import_tasks: stat.yml
  when:
    - venv is defined and venv.get('name')
    - (tmp_venv_created is defined and tmp_venv_created) or venv.get('return_stats')

# - name: Ensure python-dev is available (py2)
#   apt:
#     name: python-dev
#     state: present
#   when:
#     - agent_venv_python is defined
#     - agent_venv_python.startswith('python2')

# - name: Install virtualenvwrapper
#   shell: "{{item}}"
#   with_items:
#     - "{{virtualenvwrapper_python}} -m pip install virtualenvwrapper"
#     - "{{virtualenvwrapper_python}} -m pip install virtualenv"
#   become: yes
#   become_user: "root"

# - name: Install virtualenvwrapper
#   shell: "{{item}}"
#   with_items:
#     - "{{virtualenvwrapper_python}} -m pip install virtualenvwrapper"
#     - "{{virtualenvwrapper_python}} -m pip install virtualenv"
#   become: yes
#   become_user: "{{virtualenv_user}}"

# - block:
#   - name: Assert virtualenvwrapper is available
#     shell: "ls {{virtualenvwrapper_script}}"
#     register: found_virtualenv
#   rescue:
#     # hmm, ubuntu 20 only maybe?
#     - block:
#       - name: Copy from /usr/share
#         shell: >-
#           cp /usr/share/virtualenvwrapper/virtualenvwrapper.sh
#           {{virtualenvwrapper_script|dirname}}
#       rescue:
#         - name: Install virtualenvwrapper
#           shell: pip3 install virtualenvwrapper
#
# - name: Update bashrc for virtualenvwrapper
#   become: yes
#   become_user: "{{virtualenv_user}}"
#   lineinfile:
#     dest: "~{{virtualenv_user}}/.bash_profile"
#     create: yes
#     insertafter: EOF
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#   with_items:
#     # - { line: 'export WORKON_HOME=$HOME/.environments', regexp: '^export WORKON_HOME' }
#     # - { line: 'export PIP_VIRTUALENV_BASE=$WORKON_HOME', regexp: '^export PIP_VIRTUALENV_BASE='}
#     - { line: 'export VIRTUALENVWRAPPER_ENV_BIN_DIR=bin', regexp: '^export VIRTUALENVWRAPPER_ENV_BIN_DIR=bin'}
#     - { line: 'source /usr/local/bin/virtualenvwrapper.sh', regexp: '^source /usr/local/bin/virtualenvwrapper.sh'}
