##
# elo.virtualenv::main
##
- block:
  - debug: msg="elo.virtualenv::main"

  - name: Ensure virtualenv related packages are installed (Linux)
    apt:
      name: "{{item}}"
      state: present
    become: yes
    become_user: root
    with_items:
      - python3-virtualenv
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  
  - name: Ensure virtualenv related packages are installed (OSX)
    shell: "python3 -mpip install {{item}}"
    become: yes
    become_user: root
    with_items:
      - virtualenv
    when: ansible_distribution == 'MacOSX' 

  - import_tasks: facts.yml

  - name: Ensure `virtualenv_home` exists
    shell: >-
      ls {{virtualenv_home}}
      || mkdir -p {{virtualenv_home}}
    with_items:
      - "{{virtualenv_home}}"

- block:
  - debug: msg="Create venv if it doesnt exist"
  - block:
      - shell: "ls {{virtualenv_home}}/{{venv.name}}"
      - set_fact:
          tmp_venv_created: no
    rescue:
      - shell: >-
          {{virtualenv_exec}} --python
          {{venv.get('python', 'python3')}}
          {{virtualenv_home}}/{{venv.name}}
        register: tmp_out
      - debug: var=tmp_out
      - set_fact:
          tmp_venv_created: yes
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('state', 'present') in ['present','installed']

- block:
    - name: Destroy venv if requested
      shell: >-
        (ls {{virtualenv_home}}/{{venv.name.replace(' ','_')}}
        && rm -rf {{virtualenv_home}}/{{venv.name}})
        || echo 'no such venv'
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('state') in ['removed', 'absent', 'destroyed']

- name: Honor `venv.requirements_file`
  shell: >-
    ls {{venv.requirements_file}}
    && bash -c "source {{virtualenv_home}}/{{venv.name}}/bin/activate
    && cd {{venv.requirements_file|dirname}}
    && pip install -r {{venv.requirements_file}}"
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('requirements_file')

- name: Honor `venv.requirements` (as list)
  shell: >-
    {{virtualenv_home}}/{{venv.name}}/bin/pip install {{item}}
  with_items: "{{venv.requirements}}"
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('requirements') is iterable

- name: Honor `venv.requirements` (as string)
  shell: >-
    {{virtualenv_home}}/{{venv.name}}/bin/pip install {{venv.requirements}}
  when:
    - venv is defined
    - venv.get('name')
    - venv.get('requirements', []) is not iterable

- import_tasks: stat.yml
  when:
    - venv is defined and venv.get('name')
    - (tmp_venv_created is defined and tmp_venv_created) or venv.get('return_stats')

- name: Check if virtualenvwrapper is available
  register: found_virtualenvwrapper_script
  ignore_errors: true
  shell: "ls {{virtualenvwrapper_script}}"

- import_tasks: install-virtualenvwrapper.yml
  when: 
    - found_virtualenvwrapper_script is failed
  